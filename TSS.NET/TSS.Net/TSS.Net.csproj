<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <AssemblyName>TSS.Net</AssemblyName>
    <TargetFrameworks>net472;netcoreapp2.1</TargetFrameworks>
    <PackageId>TSS.Net</PackageId>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
    <Version>20210628</Version>
    <NeutralLanguage>en-US</NeutralLanguage>
  </PropertyGroup>
  <PropertyGroup>
    <NixTarget>false</NixTarget>
    <NixTarget Condition="$(RuntimeIdentifier.Contains('linux')) Or '$(OS)' == 'Unix' Or '$(OS)' == 'Linux'">true</NixTarget>
  </PropertyGroup>

	<PropertyGroup>
		<AnalysisMode>none</AnalysisMode>
		<AnalysisLevel>none</AnalysisLevel>
	</PropertyGroup>

  <!-- delay sign the assembly for Release build -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <AssemblyOriginatorKeyFile>..\35MSSharedLib1024.snk</AssemblyOriginatorKeyFile>
    <DelaySign>true</DelaySign>
    <SignAssembly>true</SignAssembly>
  </PropertyGroup>

  <!-- .NET standard library lacks a CMAC implementation, use BouncyCastle just for this. -->
  <ItemGroup>
    <PackageReference Include="BouncyCastle.NetCore" Version="1.8.8" />
  </ItemGroup>
<!--
  <ItemGroup>
    <PackageReference Include="System.Security.Cryptography.Cng" Version="4.5.0" />
  </ItemGroup>
-->
  <!--
    <GenerateAssemblyTitleAttribute>false</GenerateAssemblyTitleAttribute>
    <GenerateAssemblyDescriptionAttribute>false</GenerateAssemblyDescriptionAttribute>
    <GenerateAssemblyConfigurationAttribute>false</GenerateAssemblyConfigurationAttribute>
    <GenerateAssemblyCompanyAttribute>false</GenerateAssemblyCompanyAttribute>
    <GenerateAssemblyProductAttribute>false</GenerateAssemblyProductAttribute>
    <GenerateAssemblyCopyrightAttribute>false</GenerateAssemblyCopyrightAttribute>
    <GenerateAssemblyVersionAttribute>false</GenerateAssemblyVersionAttribute>
    <GenerateAssemblyFileVersionAttribute>false</GenerateAssemblyFileVersionAttribute>
	<PropertyGroup Condition="$(TargetFramework).Contains('netcoreapp')) Or $(TargetFramework).Contains('netstandard'))">
  -->
  
 <!-- 
  To build, use:
    dotnet build TSS.Net.csproj -r linux-x64 -f netcoreapp2.0 -c Release 
	dotnet build TSS.Net.csproj -r linux-musl-x64 -f netcoreapp2.1 -c Release
    dotnet build TSS.Net.csproj -r linux-arm -f netcoreapp2.0 -c Release -p:PlatformTarget=ARM 
 -->
 
</Project>
